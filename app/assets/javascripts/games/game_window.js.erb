'use strict';      

      function init() {

        var pusher = new Pusher("<%= ENV['PUSHER_KEY'] %>", {authEndpoint: '/pushers/auth'});
        gameChannel = pusher.subscribe('presence-game-channel')
        
        var rows = 20
        var columns = 20

        var scope = angular.element(document.getElementById("gamectrl")).scope()


        actionService.init(window);
        var stage = new createjs.Stage("main");

        var canvas = stage.canvas



        var world = new createjs.Container();
        world.x = 0
        world.y = 0
        stage.addChild(world)


        
        var grid; 
                
        grid = new Grid(rows, columns);
        grid.x = 0
        grid.y = 0
        grid.width = (grid.gridRows)*120;
        grid.height = (grid.columns)*120;
        world.addChildAt(grid, 0)

        var playerOne;
        var playerTwo;
        gameChannel.bind('pusher:subscription_succeeded', function(members){
          if (members.count === 1){ 
            members.each(function(member){
              playerOne = member;
            })
          }
        })
          
        
        gameChannel.bind('pusher:member_added', function(members){
          gameChannel.members.each(function(member){
            if (member.id === playerOne.id){
              sidewinder(grid, false, false);
              scope.$apply(function(){
                scope.triggerMaze(closeOutSeedPrep, indexSeedPrep)
              })
            } else {
              playerTwo = member;
            }
          })
        })
        

        gameChannel.bind('maze_generated', function(data){


          
          sidewinder(grid, data.closeOutSeed, data.indexSeed)  

          var startCell = grid.preparedGrid[0][0];
          startCell.cellDistances();          
          

        var FLOOR
          , NORTHWALL
          , SOUTHWALL
          , EASTWALL
          , WESTWALL
          , NORTHDOOR
          , SOUTHDOOR
          , EASTDOOR
          , WESTDOOR;

          var queue = new createjs.LoadQueue(true);
          function preload(){
          queue.addEventListener("complete", handleComplete);
          queue.loadManifest([
            {id:"floor", src:"<%= image_path('metal-floor-tile-1.png')%>"},
            {id:"eastwall", src:"<%= image_path('eastwall.png')%>"},
            {id:"westwall", src:"<%= image_path('westwall.png')%>"},
            {id:"northwall", src:"<%= image_path('northwall.png')%>"},
            {id:"southwall", src:"<%= image_path('southwall.png')%>"},
            {id:"eastdoor", src:"<%= image_path('eastdoor.png')%>"},
            {id:"westdoor", src:"<%= image_path('westdoor.png')%>"},
            {id:"northdoor", src:"<%= image_path('northdoor.png')%>"},
            {id:"southdoor", src:"<%= image_path('southdoor.png')%>"},
          ]);
            function handleComplete() {
              FLOOR = queue.getResult("floor");
              EASTWALL = queue.getResult("eastwall");
              WESTWALL = queue.getResult("westwall");
              NORTHWALL = queue.getResult("northwall");
              SOUTHWALL = queue.getResult("southwall");
              EASTDOOR = queue.getResult("eastdoor");
              WESTDOOR = queue.getResult("westdoor");
              NORTHDOOR = queue.getResult("northdoor");
              SOUTHDOOR = queue.getResult("southdoor");

              grid.drawCells(grid, FLOOR, NORTHWALL, SOUTHWALL, EASTWALL, WESTWALL, NORTHDOOR, SOUTHDOOR, EASTDOOR, WESTDOOR);
            };
          };

          preload();
        
        
          })
        var _W = 500
          , _H = 500
          , xCentre = _W/2
          , yCentre = _H/2
          , wWidth = (rows+1)*120
          , wHeight = (columns+1)*120;


        heroes = {};
        gameChannel.bind('pusher:subscription_succeeded', function(members) {
            members.each(function(member){
              if (member.id != gameChannel.members.me.id){
                var aHero = new Hero('Hero', 20, 20, wWidth, wHeight, gameChannel, member.id);
                heroes[member.id] = aHero;
                world.addChild(heroes[member.id])
              } else {
                var newHero = new Hero('Hero 1', 20, 20, wWidth, wHeight, gameChannel, gameChannel.members.me.id);
                world.addChild(newHero);
                heroes[gameChannel.members.me.id] = newHero;
              };
            })           
        })

        gameChannel.bind('pusher:member_added', function(member){
          gameChannel.members.each(function(member){
              if (member.id != gameChannel.members.me.id){
                var aHero = new Hero('Hero', 20, 20, wWidth, wHeight, gameChannel, member.id);
                heroes[member.id] = aHero;
                world.addChild(heroes[member.id]);
              };
            })
        })
        
        var foreignLastAction; 
        var foreignHero;
        var foreignDestinationRight;
        var foreignDestinationLeft;
        var foreignDestinationUp;
        var foreignDestinationDown;
        var go;
        var listening = false;
        var hereTime = 0;

        gameChannel.bind('client-hero_moved', function(data){
          foreignHero = heroes[data.id];
          foreignDestinationRight = data.destinationRight;
          foreignDestinationLeft = data.destinationLeft;
          foreignDestinationDown = data.destinationDown;
          foreignDestinationUp = data.destinationUp;
          go = true;
          if (!listening){
            foreignHero.addEventListener('tick', animateThis)
            listening = true;
          }
          hereTime = timeElapsed
        })

        function animateThis(event){  
          if (go){
          console.log("got here.")
          if (foreignDestinationRight && foreignHero.x < foreignDestinationRight){
              while (foreignHero.x < foreignDestinationRight){
                foreignHero.x+= 5;
                if (foreignHero.x + 5 > foreignDestinationRight){
                  foreignHero.x = foreignDestinationRight
                }
              }
              if (foreignDestinationRight && foreignLastAction !="right"){
                foreignHero.body.gotoAndPlay("runLeftRight")
                if (foreignHero.body.scaleX === -1){
                  foreignHero.body.scaleX = 1;
                }
                foreignLastAction = "right";
              };
          } else if (foreignDestinationLeft && foreignHero.x > foreignDestinationLeft){
              while (foreignHero.x > foreignDestinationLeft){
                foreignHero.x-= 5;
                if (foreignHero.x - 5 < foreignDestinationLeft){
                  foreignHero.x = foreignDestinationLeft
                }
              };
              if (foreignDestinationLeft && foreignLastAction != "left"){
                foreignHero.body.gotoAndPlay("runLeftRight");
                foreignHero.body.scaleX = -1;
                foreignLastAction = "left"
              };
          }; 
          if (foreignDestinationDown && foreignHero.y < foreignDestinationDown){
              while (foreignHero.y < foreignDestinationDown){
                foreignHero.y+= 5;
                if (foreignHero.y + 5 > foreignDestinationDown){
                  foreignHero.y = foreignDestinationDown
                }
              }
              if (foreignDestinationDown && foreignLastAction != "down"){
                foreignHero.body.gotoAndPlay("runUpDown")
                if (foreignHero.body.scaleY === -1){
                  foreignHero.body.scaleY = 1;
                }
                foreignLastAction = "down"
              };        
          } else if (foreignDestinationUp && foreignHero.y > foreignDestinationUp){
              while (foreignHero.y > foreignDestinationUp){
                foreignHero.y-= 5;
                if (foreignHero.y - 5 < foreignDestinationUp){
                  foreignHero.y = foreignDestinationUp
                }
              }
              if (foreignDestinationUp && foreignLastAction != "up"){
                foreignHero.body.gotoAndPlay("runUpDown");
                foreignHero.body.scaleY = -1;
                foreignLastAction = "up"
              };
          };
          if (hereTime + 250 < timeElapsed){
            foreignHero.body.gotoAndStop("stand");
            foreignLastAction = "none";
          };
        };
        }

        createjs.Ticker.timingMode = createjs.Ticker.RAF;
        createjs.Ticker.setFPS(40);
        createjs.Ticker.addEventListener("tick", function (event) { 
          stage.update();
          updateBackground();
          cameraMove();
        });

        function cameraMove(){
          if (wWidth > _W) {
            if (heroes[gameChannel.members.me.id].x < wWidth - xCentre && heroes[gameChannel.members.me.id].x > xCentre)
              world.x = -heroes[gameChannel.members.me.id].x + xCentre;
            else if (heroes[gameChannel.members.me.id].x >= wWidth - xCentre)
              world.x = -(wWidth - _W);
            else
              world.x = 0;
          }

          if (wHeight > _H) {
            if (heroes[gameChannel.members.me.id].y < wHeight - yCentre && heroes[gameChannel.members.me.id].y > yCentre)
              world.y = -heroes[gameChannel.members.me.id].y + yCentre;
            else if (heroes[gameChannel.members.me.id].y >= wHeight - yCentre)
              world.y = -(wHeight - _H);
            else
              world.y = 0;
          }
        };

        function updateBackground() {
          var x = world.x
            , y = world.y;

          canvas.style.backgroundPositionX = x + 'px';
          canvas.style.backgroundPositionY = y + 'px';
        };

        gameChannel.bind('maze_won', function(data){
          gameChannel.members.each(function(member){
            if (data.winnerId === member.id){
              triggerWin(member);
            };
          })  
        })

        
        function triggerWin(winningPlayer){
          gameChannel.members.each(function(member){
            if (member.id === winningPlayer.id){
              scope.$apply( function () {
                scope.toggleGamePlayedWin(winningPlayer);  
              });          
            } else {
              var losingPlayer = member;
              scope.$apply( function () {
                scope.toggleGamePlayedLoss(losingPlayer);  
              }); 
            }
            stage.removeAllChildren();
            stage.update();
          })
        };
      };
