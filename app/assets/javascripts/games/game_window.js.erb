'use strict';      

      function init() {

        var pusher = new Pusher("<%= ENV['PUSHER_KEY'] %>", {authEndpoint: '/pushers/auth'});
        gameChannel = pusher.subscribe('presence-game-channel')
        
        var rows = 20
        var columns = 20

        var scope = angular.element(document.getElementById("gamectrl")).scope()


        actionService.init(window);
        var stage = new createjs.Stage("main");

        var canvas = stage.canvas



        var world = new createjs.Container();
        world.x = 0
        world.y = 0
        stage.addChild(world)


        
        var grid; 
                
        grid = new Grid(rows, columns);
        grid.x = 0
        grid.y = 0
        grid.width = (grid.gridRows)*100;
        grid.height = (grid.columns)*100;
        world.addChildAt(grid, 0)

        var playerOne;
        var playerTwo;
        gameChannel.bind('pusher:subscription_succeeded', function(members){
          if (members.count === 1){ 
            members.each(function(member){
              playerOne = member;
            })
          }
        })
          
        
        gameChannel.bind('pusher:member_added', function(members){
          console.log("player 2 got here.")
          gameChannel.members.each(function(member){
            if (member.id === playerOne.id){
              console.log("in here")
              sidewinder(grid, false, false);
              scope.$apply(function(){
                scope.triggerMaze(closeOutSeedPrep, indexSeedPrep)
              })
            } else {
              playerTwo = member;
            }
          })
        })
        

        gameChannel.bind('maze_generated', function(data){


          console.log("sidewinding")
          sidewinder(grid, data.closeOutSeed, data.indexSeed)  

          var startCell = grid.preparedGrid[0][0];
          startCell.cellDistances();          
          

        var FLOOR
          , NORTHWALL
          , SOUTHWALL
          , EASTWALL
          , WESTWALL
          , NORTHDOOR
          , SOUTHDOOR
          , EASTDOOR
          , WESTDOOR;

          var queue = new createjs.LoadQueue(true);
          function preload(){
          queue.addEventListener("complete", handleComplete);
          queue.loadManifest([
            {id:"floor", src:"<%= image_path('metal-floor-tile-1.png')%>"},
            {id:"eastwall", src:"<%= image_path('eastwall.png')%>"},
            {id:"westwall", src:"<%= image_path('westwall.png')%>"},
            {id:"northwall", src:"<%= image_path('northwall.png')%>"},
            {id:"southwall", src:"<%= image_path('southwall.png')%>"},
            {id:"eastdoor", src:"<%= image_path('eastdoor.png')%>"},
            {id:"westdoor", src:"<%= image_path('westdoor.png')%>"},
            {id:"northdoor", src:"<%= image_path('northdoor.png')%>"},
            {id:"southdoor", src:"<%= image_path('southdoor.png')%>"},
          ]);
            function handleComplete() {
              FLOOR = queue.getResult("floor");
              EASTWALL = queue.getResult("eastwall");
              WESTWALL = queue.getResult("westwall");
              NORTHWALL = queue.getResult("northwall");
              SOUTHWALL = queue.getResult("southwall");
              EASTDOOR = queue.getResult("eastdoor");
              WESTDOOR = queue.getResult("westdoor");
              NORTHDOOR = queue.getResult("northdoor");
              SOUTHDOOR = queue.getResult("southdoor");

              grid.drawCells(grid, FLOOR, NORTHWALL, SOUTHWALL, EASTWALL, WESTWALL, NORTHDOOR, SOUTHDOOR, EASTDOOR, WESTDOOR);
            };
          };

          preload();
        
        
          })
        var _W = 500
          , _H = 500
          , xCentre = _W/2
          , yCentre = _H/2
          , wWidth = (rows+1)*100
          , wHeight = (columns+1)*100;


        var heroes = {};
        console.log("setting us up the heroes")
        gameChannel.bind('pusher:subscription_succeeded', function(members) {
            members.each(function(member){
              if (member.id != gameChannel.members.me.id){
                var aHero = new Hero('Hero', 20, 20, wWidth, wHeight, gameChannel, member.id);
                heroes[member.id] = aHero;
                console.log("Second hero added with member id " + member.id)
                world.addChild(heroes[member.id])
              } else {
                var newHero = new Hero('Hero 1', 20, 20, wWidth, wHeight, gameChannel, gameChannel.members.me.id);
                world.addChild(newHero);
                console.log("Added me with member id " + gameChannel.members.me.id)
                heroes[gameChannel.members.me.id] = newHero;
              };
            })           
        })

        gameChannel.bind('pusher:member_added', function(member){
          gameChannel.members.each(function(member){
              if (member.id != gameChannel.members.me.id){
                var aHero = new Hero('Hero', 20, 20, wWidth, wHeight, gameChannel, member.id);
                heroes[member.id] = aHero;
                world.addChild(heroes[member.id]);
                console.log("Second hero added.");
              };
            })
        })
         
        gameChannel.bind('client-hero_moved', function(data){
          console.log(heroes[data.id].x)
          console.log(data.destinationX)
          console.log(data.destinationY)
          if (heroes[data.id].x < data.destinationX){
            while(heroes[data.id].x < data.destinationX){
              heroes[data.id].x++;
            };         
          } else if (heroes[data.id].x > data.destinationX){
            while(heroes[data.id].x > data.destinationX){
              heroes[data.id].x--;
            }
          } 
          if (heroes[data.id].y < data.destinationY){
            while(heroes[data.id].y < data.destinationY){
              heroes[data.id].y++;
            };         
          } else if (heroes[data.id].y > data.destinationY){
            while(heroes[data.id].y > data.destinationY){
              heroes[data.id].y--;
            }
          }
        })

        createjs.Ticker.timingMode = createjs.Ticker.RAF;
        createjs.Ticker.setFPS(40);
        createjs.Ticker.addEventListener("tick", function (event) { 
          stage.update();
          updateBackground();
          cameraMove();
        });

        function cameraMove(){
          if (wWidth > _W) {
            if (heroes[gameChannel.members.me.id].x < wWidth - xCentre && heroes[gameChannel.members.me.id].x > xCentre)
              world.x = -heroes[gameChannel.members.me.id].x + xCentre;
            else if (heroes[gameChannel.members.me.id].x >= wWidth - xCentre)
              world.x = -(wWidth - _W);
            else
              world.x = 0;
          }

          if (wHeight > _H) {
            if (heroes[gameChannel.members.me.id].y < wHeight - yCentre && heroes[gameChannel.members.me.id].y > yCentre)
              world.y = -heroes[gameChannel.members.me.id].y + yCentre;
            else if (heroes[gameChannel.members.me.id].y >= wHeight - yCentre)
              world.y = -(wHeight - _H);
            else
              world.y = 0;
          }
        };

        function updateBackground() {
          var x = world.x
            , y = world.y;

          canvas.style.backgroundPositionX = x + 'px';
          canvas.style.backgroundPositionY = y + 'px';
        };

        gameChannel.bind('maze_won', function(data){
          gameChannel.members.each(function(member){
            if (data.winnerId === member.id){
              triggerWin(member);
            } else {
              triggerLoss(member);
            };
          })  
        })


        function triggerWin(winningPlayer){
          gameChannel.members.each(function(member){
            if (member.id === winningPlayer.id){
              stage.removeAllChildren();
              scope.$apply( function () {
                scope.toggleGamePlayedWin(winningPlayer);  
              });          
              stage.update();
            }
          })
        };
        

        function triggerLoss(losingPlayer){
          gameChannel.members.each(function(member){
            if (member.id === losingPlayer.id){
              stage.removeAllChildren();
              scope.$apply( function () {
                scope.toggleGamePlayedLoss(losingPlayer);  
              });          
              stage.update();
            }
          })
        };

      };
