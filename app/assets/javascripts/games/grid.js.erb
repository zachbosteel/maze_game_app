'use strict';

var Container = createjs.Container

var Grid = createSubclass(Container, 'Grid', {
  initialize: Grid$initialize,
  brackets: Grid$brackets,
  randomCell: Grid$randomCell,
  size: Grid$size,
  eachRow: Grid$eachRow,
  eachCell: Grid$eachCell,
  drawCells: Grid$drawCells
});

function Grid$initialize(rows, columns){
    Container.prototype.initialize.apply(this, arguments);
    this.gridRows = rows;
    this.columns = columns;
    var grid = this;
    this.preparedGrid = prepareGrid.call(this);
    configureCells.call(this);
};



function prepareGrid(){
  var arrayRows = new Array(parseInt(this.gridRows));
  for (var row = 0; row <= parseInt(this.gridRows); row++){
    var arrayColumns = new Array(parseInt(this.columns))
    for (var column = 0; column <= parseInt(this.columns); column++){
      var cell = new Cell(row, column, 'cell', this);
      arrayColumns[column] = cell;
    };
    arrayRows[row] = arrayColumns;
  };
  return arrayRows;
};


function Grid$eachRow(block){
  for (var row = 0; row <= this.prepardeGrid.length; row++){
    //placeholder!!!!!
    return true
  };
};

function Grid$eachCell(){
  for (var row = 0; row < this.prepardeGrid.length; row++){
    for (var cell = 0; cell < row.length; cell++){
      var cell = preparedGrid[row][column];

    };
  };  
};

function configureCells(){
  for (var row = 0; row <= this.gridRows; row++){
    var rowArray = this.preparedGrid[row];
    for (var column = 0; column <= this.columns; column++){
      var cell = rowArray[column];
      if (row > 0){
        cell.north = this.preparedGrid[row - 1][column]
      };
      if (row < this.gridRows){   
        cell.south = this.preparedGrid[row + 1][column]
      };
      if (column > 0){
        cell.west = this.preparedGrid[row][column - 1]
      };
      if (column < this.columns){
        cell.east = this.preparedGrid[row][column + 1]
      };
    };
  };
};

function Grid$brackets(row, column){
  if (row > 0 && row < grid.gridRows - 1){
    //using this as an Unless statement
  } else {
    return nil; 
  };
  if (column > 0 && column < grid.columns - 1){
    //using this as an Unless statement
  } else {
    return nil;
  };
  return grid.preparedGrid[row][column];
};

function Grid$size(){
  return grid.gridRows * grid.columns;
};

function Grid$randomCell(){
  var randomRow = Math.floor((Math.random() * this.gridRows) + 1);
  var randomColumn = Math.floor((Math.random() * this.columns) + 1);
  return this.preparedGrid[randomRow][randomColumn];
};

function preload(grid, cell){
  var preload = new createjs.LoadQueue(true);
  var cell = cell
  preload.addEventListener("complete", handleComplete);
  preload.loadManifest([
    {id:"floor", src:"<%= image_path('wood-floor-tile-1.png')%>"},
    {id:"eastwall", src:"<%= image_path('eastwall.png')%>"},
    {id:"westwall", src:"<%= image_path('westwall.png')%>"},
    {id:"northwall", src:"<%= image_path('northwall.png')%>"},
    {id:"southwall", src:"<%= image_path('southwall.png')%>"}
  ]);
  function handleComplete() {
  var testTile = preload.getResult("floor");
  var wall1 = preload.getResult("eastwall");
  var wall2 = preload.getResult("westwall");
  var wall3 = preload.getResult("northwall");
  var wall4 = preload.getResult("southwall");
  var floor = new createjs.Bitmap(testTile);
  floor.x = cell.x
  floor.y = cell.y
  console.log(cell.linklist);
  grid.addChildAt(floor, 0);
  if (!cell.linked(cell.north)){
    var northwall = new createjs.Bitmap(wall3);
    northwall.x = cell.x
    northwall.y = cell.y
    grid.addChildAt(northwall, 1);
  }
  if (!cell.linked(cell.south)){
    var southwall = new createjs.Bitmap(wall4);
    southwall.x = cell.x
    southwall.y = cell.y
    grid.addChildAt(southwall, 1);
  }
  if (!cell.linked(cell.east)){
    var eastwall = new createjs.Bitmap(wall1);
    eastwall.x = cell.x
    eastwall.y = cell.y
    grid.addChildAt(eastwall, 1);
  }
  if (!cell.linked(cell.west)){
    var westwall = new createjs.Bitmap(wall2);
    westwall.x = cell.x
    westwall.y = cell.y
    grid.addChildAt(westwall, 1);
  }
}
};
  


function Grid$drawCells(grid){
  for (var row = 0; row <= grid.preparedGrid.length - 1; row++){
    for (var column = 0; column <= grid.preparedGrid[row].length - 1; column++){
      var cell = grid.preparedGrid[row][column];
      preload(grid, cell);
    };
  }; 
};
