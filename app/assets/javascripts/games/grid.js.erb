'use strict';


var Container = createjs.Container
var walls = [];

var Grid = createSubclass(Container, 'Grid', {
  initialize: Grid_initialize,
  randomCell: Grid_randomCell,
  drawCells: Grid_drawCells
});

function Grid_initialize(rows, columns){
    Container.prototype.initialize.apply(this, arguments);
    this.gridRows = rows;
    this.columns = columns;
    var grid = this;
    this.preparedGrid = prepareGrid.call(this);
    configureCells.call(this);
};



function prepareGrid(){
  var arrayRows = new Array(parseInt(this.gridRows-1));
  var count = 0
  for (var row = 0; row <= parseInt(this.gridRows); row++){
    var arrayColumns = new Array(parseInt(this.columns-1))
    for (var column = 0; column <= parseInt(this.columns); column++){
      var cell = new Cell(row, column, 'cell', this, count);
      arrayColumns[column] = cell;
      count++
    };
    arrayRows[row] = arrayColumns;
  };
  return arrayRows;
};

function configureCells(){
  for (var row = 0; row <= this.gridRows; row++){
    var rowArray = this.preparedGrid[row];
    for (var column = 0; column <= this.columns; column++){
      var cell = rowArray[column];
      if (row > 0){
        cell.north = this.preparedGrid[row - 1][column]
      };
      if (row < this.gridRows){   
        cell.south = this.preparedGrid[row + 1][column]
      };
      if (column > 0){
        cell.west = this.preparedGrid[row][column - 1]
      };
      if (column <= this.columns){
        cell.east = this.preparedGrid[row][column + 1]
      };
    };
  };
};

function Grid_randomCell(){
  var randomRow = Math.floor((Math.random() * this.gridRows) + 1);
  var randomColumn = Math.floor((Math.random() * this.columns) + 1);
  return this.preparedGrid[randomRow][randomColumn];
};

function Grid_drawCells(grid, FLOOR, NORTHWALL, SOUTHWALL, EASTWALL, WESTWALL, NORTHDOOR, SOUTHDOOR, EASTDOOR, WESTDOOR){
  for (var row = 0; row < grid.preparedGrid.length; row++){
    var rowArray = grid.preparedGrid[parseInt(row)]
    for (var column = 0; column < rowArray.length; column++){
      var cell = grid.preparedGrid[parseInt(row)][parseInt(column)];
      var floor = new createjs.Bitmap(FLOOR);
      floor.x = cell.x
      floor.y = cell.y
      grid.addChildAt(floor, 0);
      if (!cell.north || cell.linklist.indexOf(cell.north) === -1){
        var northwall = new createjs.Bitmap(NORTHWALL);
        northwall.x = cell.x
        northwall.y = cell.y
        northwall.width = 100;
        northwall.height = 100;
        grid.addChildAt(northwall, 1);
        walls.push(northwall);
      }
      if (!cell.south || cell.linklist.indexOf(cell.south) === -1){
        var southwall = new createjs.Bitmap(SOUTHWALL);
        southwall.x = cell.x
        southwall.y = cell.y
        southwall.width = 100;
        southwall.height = 100;
        grid.addChildAt(southwall, 2);
        walls.push(southwall);
      }
      if (!cell.east || cell.linklist.indexOf(cell.east) === -1){
        var eastwall = new createjs.Bitmap(EASTWALL);
        eastwall.x = cell.x
        eastwall.y = cell.y
        eastwall.width = 100;
        eastwall.height = 100;
        grid.addChildAt(eastwall, 3);
        walls.push(eastwall);
      }
      if (!cell.west || cell.linklist.indexOf(cell.west) === -1){ 
        var westwall = new createjs.Bitmap(WESTWALL);
        westwall.x = cell.x
        westwall.y = cell.y
        westwall.width = 100;
        westwall.height = 100;
        grid.addChildAt(westwall, 4);
        walls.push(westwall);
      }
    };
  };
  distances.addDoors(NORTHDOOR, SOUTHDOOR, EASTDOOR, WESTDOOR, grid); 
};
