'use strict';

var Container = createjs.Container
var EventDispatcher = createjs.EventDispatcher
var EaselEvent = createjs.Event

var Hero = createSubclass(Container, 'Hero', {
  initialize: Hero_initialize
});


var channel;
var passableId; 
function Hero_initialize(name, x, y, wWidth, wHeight, gameChannel, id) {
  Container.prototype.initialize.apply(this, arguments);
  this.name = name;
  this.x = x;
  this.y = y;
  this.radius = 10;
  this.wWidth = wWidth;
  this.wHeight = wHeight;
  this.gameChannel = gameChannel;
  channel = this.gameChannel;
  this.id = id;
  passableId = this.id;

  _setupDisplay.call(this);
  _setupProperties.call(this);

  this.on('tick', onTick);
};


function _setupDisplay(){
  this.body = new createjs.Bitmap("<%= image_path('Carbuncle2.gif')%>")
  this.body.x = this.x - 10;
  this.body.y = this.y - 10;
  this.addChild(this.body);
}

function _setupProperties(){
  this.name = 'hero';
  this.inertia = 0;
};

var destinationX;
var destinationY;

function onTick(event){
  var actions = actionService.get();

  var speed = 5;
  

  if (actions.moveright && actions.moveright.player === this.id){ 
    this.x += speed;
    destinationX = this.x + speed;
  }
  if (actions.moveleft && actions.moveleft.player === this.id){ 
    this.x -= speed;
    destinationX = this.x - speed;
  }
  if (actions.moveup && actions.moveup.player === this.id){
    this.y -= speed;
    destinationY = this.y - speed;
  }
  if (actions.movedown && actions.movedown.player === this.id){
    this.y += speed;
    destinationY = this.y + speed;
  }

  for (var wall = 0; wall < walls.length; wall++){
    var currentWall = walls[wall];
    var intersection = ndgmr.checkPixelCollision(currentWall, this.body)
    if (intersection){
      console.log("collision!");
      if (actions.moveright && currentWall.x + 80 > this.x){ 
        console.log("collision to the right!")
        this.x -= 9; 
        destinationX = null;
        delete actions.moveright
      }
      if (actions.moveleft && currentWall.x < this.x + this.radius){ 
        console.log("collision to the left!")
        this.x +=12;
        destinationX = null;
        delete actions.moveleft
      };
      if (actions.moveup && currentWall.y < this.y + this.radius) {
        console.log("collision above!")
        this.y +=12;
        destinationY = null;
        delete actions.moveup
      }
      if (actions.movedown && currentWall.y + 80 > this.y) {
        console.log("collision below!")
        this.y -=9;
        destinationY = null;
        delete actions.movedown
      };
    } 
  }

  for (var door = 0; door < endDoor.length; door++){
    var currentDoor = endDoor[door];
    var win = ndgmr.checkPixelCollision(currentDoor, this.body);
    if (win){
      triggerWin(this);
    };
  };

  if (this.x === this.wWidth - this.width) {
    this.x -= 7;
    actions.moveright = false;
    destinationX = null;
  }
  if (this.x === this.width) {
    this.x +=7;
    actions.moveleft = false;
    destinationX = null;
  }
  if (this.y === this.height) {
    this.y +=7;
    actions.moveup = false;
    destinationY = null;
  }
  if (this.y === this.wHeight - this.height) {
    this.y -=7;
    actions.movedown = false;
    destinationY = null;
  }

  if (this.x < 0 || this.x > this.wWidth){
    this.x = this.x * -1;
  }
  if (this.y < 0 || this.y > this.wHeight){
    this.y = this.y * -1;
  }
  
}



setInterval(function() {
  console.log("interval!")
    var actionsChecker = actionService.get();
    if (actionsChecker.moveright || actionsChecker.moveleft || actionsChecker.moveup || actionsChecker.movedown){
      var passId = channel.members.me.id
      console.log("interval movement for Hero " + passId);
      channel.trigger('client-hero_moved', {id: passId, destinationX: destinationX, destinationY: destinationY});
}}, 100)

function triggerWin(winningHero){
          // if (winningHero.player === "player1"){
          //   triggerLoss(player2)
          // } else {
          //   triggerLoss(player1)
          // };

  var stage = winningHero.parent.parent
  stage.removeAllChildren();
  var scope = angular.element(document.getElementById("gamectrl")).scope()
  
  scope.$apply( function () {
    scope.toggleGamePlayed();  
  });

  
  

  stage.update();
};

