'use strict';

var Container = createjs.Container
var EventDispatcher = createjs.EventDispatcher
var EaselEvent = createjs.Event

var Hero = createSubclass(Container, 'Hero', {
  initialize: Hero_initialize
});

var heroes;
var channel;
var passableId; 
function Hero_initialize(name, x, y, wWidth, wHeight, gameChannel, id) {
  Container.prototype.initialize.apply(this, arguments);
  this.name = name;
  this.x = x;
  this.y = y;
  this.radius = 10;
  this.wWidth = wWidth;
  this.wHeight = wHeight;
  this.gameChannel = gameChannel;
  channel = this.gameChannel;
  this.id = id;
  this.destinationRight;
  this.destinationLeft;
  this.destinationUp;
  this.destinationDown;
  var tempHero = this
  var redData ={
    images: ["<%= image_path('runCycleRightLeft.png') %>", "<%= image_path('runCycleUpDown.png') %>"],
    frames: {width:30, height:30, count:64},
    animations: {
      runLeftRight: [0,31],
      runUpDown: [32,63],
      stand: 6 
    }
  }
  var greenData = {
    images: ["<%= image_path('runCycleRightLeftGreen.png') %>", "<%= image_path('runCycleUpDownGreen.png') %>"],
    frames: {width:30, height:30, count:64},
    animations: {
      runLeftRight: [0,31],
      runUpDown: [32,63],
      stand: 6 
    }
  }
  this.redSpriteSheet = new createjs.SpriteSheet(redData)
  this.greenSpriteSheet = new createjs.SpriteSheet(greenData)
  passableId = this.id;

  _setupDisplay.call(this);
  _setupProperties.call(this);

  this.on('tick', onTick);
};


function _setupDisplay(){
  if (this.id === channel.members.me.id){
    this.body = new createjs.Sprite(this.redSpriteSheet);
  } else {
    this.body = new createjs.Sprite(this.greenSpriteSheet);
  };
  // this.body = new createjs.Bitmap("<%= image_path('Carbuncle2.gif')%>")
  this.body.x = this.x - 10;
  this.body.y = this.y - 10;
  this.addChild(this.body);
}

function _setupProperties(){
  this.name = 'hero';
  this.inertia = 0;
};

var lastAction;
function animate(myHero){
  var animationActions = actionService.get();
  var animation;
  if (animationActions.moveright && lastAction != "right"){
    lastAction = "right";
    myHero.body.gotoAndPlay("runLeftRight");
      if (myHero.body.scaleX === -1){
        myHero.body.scaleX = 1;
      };
  };
  if (animationActions.moveleft && lastAction != "left"){
    lastAction = "left";
    myHero.body.gotoAndPlay("runLeftRight");
    myHero.body.scaleX = -1;
  };
  if (animationActions.moveup && lastAction != "up"){
    lastAction = "up";
    myHero.body.gotoAndPlay("runUpDown");
    myHero.body.scaleY = -1;
  };
  if (animationActions.movedown && lastAction != "down"){
    lastAction = "down";
    myHero.body.gotoAndPlay("runUpDown");
      if (myHero.body.scaleY === -1){
        myHero.body.scaleY = 1;
    };
  };
  
}


function onTick(event){
  var actions = actionService.get();

  var speed = 5;
  
  if (!actions.moveright && !actions.moveleft && !actions.moveup && !actions.movedown && this.id === channel.members.me.id){    
    this.body.gotoAndStop("stand");
    lastAction = null;
    this.destinationRight = null;
    this.destinationLeft = null;
    this.destinationUp = null;
    this.destinationDown = null;
  }


  if (actions.moveright && actions.moveright.player === this.id){ 
    this.x += speed;
    this.destinationRight = this.x + speed;
    this.destinationLeft = null;
    animate(this);
  }
  if (actions.moveleft && actions.moveleft.player === this.id){ 
    this.x -= speed;
    this.destinationLeft = this.x - speed;
    this.destinationRight = null;
    animate(this);
  }
  if (actions.moveup && actions.moveup.player === this.id){
    this.y -= speed;
    this.destinationUp = this.y - speed;
    this.destinationDown = null;
    animate(this);
  }
  if (actions.movedown && actions.movedown.player === this.id){
    this.y += speed;
    this.destinationDown = this.y + speed;
    this.destinationUp = null;
    animate(this);
  }

  for (var wall = 0; wall < walls.length; wall++){
    var currentWall = walls[wall];
    var intersection = ndgmr.checkPixelCollision(currentWall, this.body)
    if (intersection){
      if (actions.moveright && currentWall.x + 120 > this.x){ 
        console.log("collision to the right!")
        this.x -= 10; 
        this.destinationRight = null;
        delete actions.moveright
      }
      if (actions.moveleft && currentWall.x < this.x + this.radius){ 
        console.log("collision to the left!")
        this.x +=10;
        this.destinationLeft = null;
        delete actions.moveleft
      };
      if (actions.moveup && currentWall.y < this.y + this.radius) {
        console.log("collision above!")
        this.y +=10;
        this.destinationUp = null;
        delete actions.moveup
      }
      if (actions.movedown && currentWall.y + 120 > this.y) {
        console.log("collision below!")
        this.y -=10;
        this.destinationDown = null;
        delete actions.movedown
      };
    } 
  }

  for (var door = 0; door < endDoor.length; door++){
    var currentDoor = endDoor[door];
    var win = ndgmr.checkPixelCollision(currentDoor, this.body);
    var winnerId = this.id
    if (win){
      var scope = angular.element(document.getElementById("gamectrl")).scope()
  
      scope.$apply( function () {
        scope.triggerEnd(winnerId);  
      });
    };
  };

  if (this.x === this.wWidth - this.width) {
    this.x -= 10;
    actions.moveright = false;
    this.destinationRight = null;
  }
  if (this.x === this.width) {
    this.x +=10;
    actions.moveleft = false;
    this.destinationLeft = null;
  }
  if (this.y === this.height) {
    this.y +=10;
    actions.moveup = false;
    this.destinationUp = null;
  }
  if (this.y === this.wHeight - this.height) {
    this.y -=10;
    actions.movedown = false;
    this.destinationDown = null;
  }

  if (this.x < 0 || this.x > this.wWidth){
    this.x = this.x * -1;
  }
  if (this.y < 0 || this.y > this.wHeight){
    this.y = this.y * -1;
  }
  
}

 


var timeElapsed = 0;
setInterval(function() {
    var actionsChecker = actionService.get();
    if (actionsChecker.moveright || actionsChecker.moveleft || actionsChecker.moveup || actionsChecker.movedown){
      var passId = channel.members.me.id
      var thisHero = heroes[passId];
      console.log(thisHero.destinationRight)
      console.log(thisHero.destinationLeft)
      console.log(thisHero.destinationUp)
      console.log(thisHero.destinationDown)
      channel.trigger('client-hero_moved', {id: passId, destinationRight: thisHero.destinationRight, destinationLeft: thisHero.destinationLeft, destinationUp: thisHero.destinationUp, destinationDown: thisHero.destinationDown});
    }
  timeElapsed += 250;
}, 250)



